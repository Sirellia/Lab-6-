import numpy as np
def diagonal_product(matrix):
    n = matrix.shape[0]
    product = 1
    for i in range(n):
        product *= matrix[i, i]
    return product
def input_matrix(size):
    matrix = np.zeros((size * 2, size * 2), dtype=int)
    print(f"Введите значения для подматрицы размером {size}x{size}:")
    for i in range(size):
        for j in range(size):
            matrix[i, j] = int(input(f"Значение в строке {i + 1}, столбце {j + 1}: "))

    return matrix
def generate_random_matrix(size):
    matrix = np.zeros((size * 2, size * 2), dtype=int)
    for i in range(size * 2):
        for j in range(size * 2):
            matrix[i, j] = np.random.randint(1, 10)  # Можно изменить диапазон случайных чисел по вашему усмотрению
    return matrix


def find_best_matrix(original_matrix):
    n = original_matrix.shape[0]
    max_product = 0
    best_matrix = None

    for perm_top in ['AB', 'BA']:
        for perm_bottom in ['CD', 'DC']:
            perm_matrix = np.copy(original_matrix)
            if perm_top == 'AB':
                perm_matrix[:n // 2, :n // 2] = original_matrix[:n // 2, :n // 2]
                perm_matrix[:n // 2, n // 2:] = original_matrix[:n // 2, n // 2:]
            else:
                perm_matrix[:n // 2, :n // 2] = original_matrix[:n // 2, n // 2:]
                perm_matrix[:n // 2, n // 2:] = original_matrix[:n // 2, :n // 2]

            if perm_bottom == 'CD':
                perm_matrix[n // 2:, n // 2:] = original_matrix[n // 2:, n // 2:]
            else:
                perm_matrix[n // 2:, n // 2:] = original_matrix[n // 2:, :n // 2]
                perm_matrix[n // 2:, :n // 2] = original_matrix[n // 2:, n // 2:]

            prod = diagonal_product(perm_matrix)

            if prod > max_product:
                max_product = prod
                best_matrix = perm_matrix

    return best_matrix

size = int(input("Введите размер подматрицы: "))
original_matrix = generate_random_matrix(size)
best_matrix = find_best_matrix(original_matrix)

print("Изначальная матрицa:")
print(original_matrix)

print("\nВарианты перестановок:")
for perm_top in ['AB', 'BA']:
    for perm_bottom in ['CD', 'DC']:
        perm_matrix = np.copy(original_matrix)
        if perm_top == 'AB':
            perm_matrix[:size, :size] = original_matrix[:size, :size]
            perm_matrix[:size, size:] = original_matrix[:size, size:]
        else:
            perm_matrix[:size, :size] = original_matrix[:size, size:]
            perm_matrix[:size, size:] = original_matrix[:size, :size]

        if perm_bottom == 'CD':
            perm_matrix[size:, size:] = original_matrix[size:, size:]
        else:
            perm_matrix[size:, size:] = original_matrix[size:, :size]
            perm_matrix[size:, :size] = original_matrix[size:, size:]

        print(perm_matrix)

print("\nЛучшая матрицa:")
print(best_matrix)
diagonal_prod = diagonal_product(best_matrix)
print(f"Результат произведения на главной диагонали лучшей матрицы: {diagonal_prod}")
